name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  github-actions-CI:
    runs-on: ubuntu-20.04
    steps:
      # Step 1   
      - name: Checkout code   
        uses: actions/checkout@v2

      # Step 2
      - name: Set up Python 
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
          architecture: x64

      # Step 3
      - name: Install Python Virtual ENV
        run: pip3 install virtualenv

      # Step 4
      - name:  Setup Venv
        uses: actions/cache@v2
        id: cache-venv
        with:
          path: venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-
      # Step 5
      - name: Activate and Install Depencies into Venv
        run: python3.8 -m venv venv && source venv/bin/activate &&
          python3.8 -m pip install --upgrade pip &&
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if: steps.cache-venv.outputs.cache-hit != 'true'

      ####### CD ##########
      # Step 1 - Use Node and NPM to install serverless-python-requirement
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Step 2
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      # Step 3
      - name: Install Node dependencies (specifically, serverless-python-requirements)
        run: npm install

      # Step 4
      - name: Serverless Deploy
        uses: dhollerbach/github-action-serverless-with-python-requirements@master
        env:
          # SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
          # or if using AWS credentials directly
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
